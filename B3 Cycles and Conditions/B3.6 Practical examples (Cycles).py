# ***** Enumerate *****

# За один проход по циклу for мы можем либо получить само значение из списка,
# либо индекс, по которому дальше можем обратиться и получить элемент, как, например, здесь:
list_ = [-5, 2, 4, 8, 12, -7, 5]
for i in range(len(list_)):
    print("Индекс элемента: ", i)
    print("Значение элеиента: ", list_[i])
    print("-----------------------------")
print("Конец цикла")

# Но, чтобы убить двух зайцев сразу, есть функция enumerate.
# Она возвращает кортежи, где на первом месте стоит индекс элемента, а на втором — его значение.
list_ = [-5, 2, 4, 8, 12, -7, 5]
# Функция enumerate возвращает данные в виде кортежей,
# где на первом месте стоит индекс, а затем значение
# [(0, -5), (1, 2), (2, 4), ...]
for i, value in enumerate(list_):
    print("Индекс элемента: ", i)
    print("Значение элемента: ", value)
    print("-----------------------------")
print("Конец цикла")
print()

print("Задание 3.6.1")
# Начинающий программист написал программу, которая находит индекс последнего отрицательного элемента в списке.
list_ = [-5, 2, 4, 8, 12, -7, 5]
# Объявим переменную, в которой будем хранить индекс отрицательного элемента
index_negative = None

for i, value in enumerate(list_):
    if value < 0:
        print("Отрицательное число: ", value)
        index_negative = i  # перезаписываем значение индекса
        print("Новый индекс отрицательного числа: ", index_negative)
    else:
        print("Положительное число: ", value)
    print("--------------------------------------------------------")
print("Конец цикла")
print()
print("Ответ: индекс последнего отрицательного элемента = ", index_negative)
print()

# ***** Цикл for со строками и словарями *****
# Цикл for может работать не только со списками, но и со строками и словарями.
# Давайте рассмотрим задачу для подсчета количества символов в тексте.

# Условие задачи: С помощью словаря в заданном тексте посчитать количество вхождения каждого символа.
text = """
У лукоморья дуб зелёный;
Златая цепь на дубе том:
И днём и ночью кот учёный
Всё ходит по цепи кругом;
Идёт направо -- песнь заводит,
Налево -- сказку говорит.
Там чудеса: там леший бродит,
Русалка на ветвях сидит;
Там на неведомых дорожках
Следы невиданных зверей;
Избушка там на курьих ножках
Стоит без окон, без дверей;
Там лес и дол видений полны;
Там о заре прихлынут волны
На брег песчаный и пустой,
И тридцать витязей прекрасных
Чредой из вод выходят ясных,
И с ними дядька их морской;
Там королевич мимоходом
Пленяет грозного царя;
Там в облаках перед народом
Через леса, через моря
Колдун несёт богатыря;
В темнице там царевна тужит,
А бурый волк ей верно служит;
Там ступа с Бабою Ягой
Идёт, бредёт сама собой,
Там царь Кащей над златом чахнет;
Там русский дух... там Русью пахнет!
И там я был, и мёд я пил;
У моря видел дуб зелёный;
Под ним сидел, и кот учёный
Свои мне сказки говорил.
"""
text = text.lower()
text = text.replace(" ", "")
text = text.replace("\n", "")
print(text)
# Символы в верхнем и нижнем регистре будем считать одинаковыми, поэтому приведем текст в нижний регистр.
# И удалим все пробелы и символы переноса строки.
count = {}  # для подсчета символов и их количества
for char in text:
    if char in count:  # если символ уже есть в словаре,
        count[char] += 1  # увеличиваем значение на 1
    else:
        count[char] = 1  # иначе пишем единицу
# применим цикл for для работы со словарем.
# У словаря есть метод items, который возвращает кортежи состоящие из пар ключ-значение.
# Зная их, можно вывести статистику по тексту.
for char, cnt in count.items():
    print(f"Символ {char} встречается {cnt} раз.")

# ***** Break *****
print()
# Рассмотрим пример, когда полезно использовать break для того, чтобы остановить выполнение цикла.
# Любой цикл, встречая ключевое слово break, преждевременно заканчивает своё выполнение и переходит
# к основному коду программы.
# Далее приведен пример для цикла while:

# Условие задачи: Проверить, является ли заданное число степенью тройки.
# Чтобы число было степенью тройки, необходимо, чтобы при его делении на 3 мы в остатке всегда получали 0.
# И как только мы дойдем до 1, значит число является степенью тройки.
# Если на каком-то шаге остаток не равен 0, то число не является степенью тройки,
# и дальше проверять нет необходимости.
n = 4
while True:
    if n % 3 == 0:
        n = n // 3
        if n == 1:
            break
    else:
        break

# ***** Continue *****
print()
# Если в теле цикла встречается ключевое слово continue,
# то цикл пропускает весь код до конца тела цикла и переходит на следующий шаг.

# Рассмотрим следующую задачу: В клетке находятся фазаны и кролики.
# Известно, что у них 35 голов и 94 ноги. Узнайте число фазанов и число кроликов.

# Количество фазанов и кроликов выражается целым числом,
# поэтому будем перебирать все возможные комбинации количества кроликов и фазанов,
# и если их суммарное количество ног равно указанному в условии, то мы нашли одно из решений.
heads = 35
legs = 94

for r in range(heads + 1):
    for ph in range(heads + 1):
        if (r + ph) > heads or \
                (r*4 + ph*2) > legs:
            continue
        if (r + ph) == heads and (r*4 + ph*2) == legs:
            print("Количество кроликов", r)
            print("Количество фазанов", ph)
            print("----------------------")