# ***** Проверка вхождение элемента в последовательность *****
print("Проверка вхождение элемента в последовательность")

# Задача: Дано целое число 123456789. Определить: входит ли в него цифра 5.
num = int(input('Enter number: '))
list_str = list(str(num))
list_num = list(map(int, list_str))
print(5 in list_num)
# можно короче:
num2 = int(input("Enter number2: "))
print(5 in list(map(int, list(str(num2)))))
# мое решение (изначальное)
num3 = input("Enter num3: ")
print('5' in num3)

# Задание 3.2.4
# Дано n-значное целое число N. Определить: входят ли в него цифры 3 и 7.
N = int(input("Enter N: "))
print('3' in str(N) and '7' in str(N))
print()

# ***** Проверка эквивалентности *****
print("Проверка эквивалентности")

# Когда вы присваиваете какой-то переменной список, то из-за особенностей реализации данного типа данных
# в эту переменную будет помещен адрес первого элемента списка и адрес на следующий элемент.
# И так по цепочке будет выстроен весь список.
# Когда вы захотите присвоить новой переменной старый список, то не будет создан новый список!
# В новую переменную будет помещена ссылка на старый список.
# Проверить это можно с помощью оператор is.

a = [1, 2, 3]
print(id(a))
b = a
print(id(b))
print(a is b)
# Эквивалентные объекты всегда равны. Но равные объекты не всегда эквивалентны:
a = [1, 2, 3]
b = [1, 2, 3]
print(a == b)
print(a is b)
# а и b выглядят одинаково, но являются абсолютно разными объектами.

# Есть ещё один особый тип переменных в Python, который состоит из одного объекта None.
# None используется, например, когда мы не знаем значение переменной, но хотим объявить её.
# Ещё вы хотите выполнить действие, которое может работать либо завершиться неудачно.
# Используя None, вы можете проверить успех действия.
# Если вы хотите проверить, является ли значение переменной None или нет, следует использовать "is"
print(a is None)