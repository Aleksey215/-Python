# ***** Изменяемые типы данных *****

"""
К понятию неизменяемость (unmutable) нужно подходить правильно.
Эта характеристика не подразумевает под собой некую константность данных.
Строка "hello" является неизменяемой в том смысле, что любая её модификация
будет порождать создание нового объекта, и в этом смысле более точный перевод unmutable — немутирующий.
В противоположность этому списки, словари и множества
могут изменять свою структуру в существующих объектах, не порождая новые.
"""

# ***** Списки *****
#  Cписок — это упорядоченный набор объектов произвольного типа.

# Создание пустого списка происходит присваиванием переменной пустых квадратных скобок:
s = []
print(s)

# При создании такого объекта в памяти резервируется область, в которой хранятся ссылки на элементы списка.
# Используя схожий синтаксис можно создать наполнение списка:
s = [0, 'hello', (1, 'a')]
print(s)
# Нами был создан объект типа «список», содержащий три элемента: целое число, строка и кортеж.
# Как можно заметить, создание списков очень схоже с созданием кортежей,
# только вместо круглых скобок используются квадратные.
# Принципиальное отличие между ними заключается в том,
# что списки можно изменять — добавлять новые объекты и удалять существующие.

# Добавление объекта осуществляется с помощью метода append().
# Метод - это функция, которая применяется к определенному объекту, используя символ "точка":
# объект.метод()

# добавление элементов в массив:
print()
print("Добавление элементов в массив")
# есть первые четыре буквы алфавита:
letters = ['a', 'b', 'c', 'd']
print(letters)
# методом .append() можно добавить еще один элемент в список
letters.append('e')
print(letters)
# В этом частично заключается изменяемость списков.
# Изначально его размер был равен 4 элементам, но мы его изменили,
# иными словами он мутировал, и размер стал равен 5 элементам.

# Список — это в первую очередь упорядоченная структура данных.
# Это означает, что каждый элемент списка имеет свой индекс — порядковый номер элемента в списке.
# Нумерация начинается с нуля!
print(letters[0])  # первый элемент списка имеет индекс - 0

print("Получение последнего элемента")
# Получить последний элемент можно двумя способами:
#   1. узнать длину объекта и отнять единицу
print(letters[len(letters) - 1])
# Если мы добавим еще какое-то количество элементов в список, такой способ будет продолжать работать:
letters.append('f')
letters.append('g')
print(letters[len(letters) - 1])
#   2. использовать отрицательные индексы
print(letters[-1])
# Отрицательные индексы позволяют вывернуть наизнанку список и нумеровать его в обратном порядке.
# И тогда последний элемент будет иметь индекс -1, предпоследний — -2 и т.д.
print(letters[-4])
# !!! Использование отрицательных индексов для получения элементов с хвоста списка
# является не только удобным решением, но и рекомендуемым, как соответствующее философии Python. !!!

# Изменение структуры списка может происходить не только путем ее увеличения (добавления новых объектов),
# но и удаления уже существующих.
# Для этого можно использовать метод pop():
print()
print("Удаление элементов")
print(letters)
letters.pop()  # данный метод, без аргументов удаляет последний элемент
print(letters)
letters.pop(0)  # удаление первого элемента, по его индексу
print(letters)
letters.pop(3)  # можно удалить любой элемент
print(letters)

# С помощью срезов можно получать сразу несколько элементов списка.
#  [:] - Возвращает элементы полностью
#  [2:] - Возвращает элементы списка, начиная с элемента индекса 2 и до конца списка
#  [:3] - Возвращает элементы списка от его начала до элемента с индексом 3, не включая его
#  [1:4] - Объединяя предыдущие два способа можно получить элементы из середины.
#          В данном случае начиная с индекса 1 до индекса 4, не включительно.
#          Иными словами, элементы с индексами 1,2 и 3
#  [::2] - Задает шаг, через который извлекаются элементы
#  [::-1] - Используя отрицательный шаг, можно развернуть массив
# ! https://pythonru.com/osnovy/spiski-python-funkcii-i-metody-python-list ! ссылка на методы списков

# Возможности языка позволяют выполнить определенные действия для каждого элемента списка.
# Такую операцию можно проделать с помощью функцию map():
# map(function, list)
# Первый аргумент map() — функция, которую нужно применить к каждому элементу списка,
# а сам список — второй аргумент.
# Возвращаемое значение этой функции — объект map, который можно преобразовать, например, обратно в список.
# Пример:
L = [3.3, 4.4, 5.5, 6.6]
print(map(round, L))  # к каждому элементу применяем функцию округления
# получили объект - map
print(list(map(round, L)))  # преобразование результата в список

# Реализация ввода чисел через пробел:
string = input("Введите числа через пробел: ")
list_of_strings = string.split()  # список строковых представлений чисел
list_of_numbers = list(map(int, list_of_strings))  # список чисел
print(sum(list_of_numbers[::3]))
print(list_of_numbers[::3])

# Напишите программу, которая на вход получает последовательность чисел, а выводит модифицированный список:
#   Первое и последнее числа последовательности должны поменяться местами.
#   В конец списка нужно добавить сумму всех чисел.
numbers = list(map(int, input("Введите через пробел числа: ").split()))
print(numbers)
numbers[0], numbers[-1] = numbers[-1], numbers[0]
print(numbers)
numbers.append(sum(numbers))
print(numbers)

# ***** Словари *****
print("Словари")
print()
# словари (dict) — упорядоченные наборы объектов, доступных по ключу.
# Иными словами, словарь — это совокупность пар ключ-объект.
# Сам объект, который хранится в словаре, может быть любым. Даже другим словарём.
# Но на ключи есть важное ограничение:
# ключ может быть только объектом неизменяемых типов данных, т.е. числом, строкой или кортежем.
# Как и в случае списков, словарь можно создать пустым,
# можно сразу наполнить его объектами, а можно расширять постепенно:

person = {}  # с помощью фигурных скобок можно создать словарь
person = {'name': 'Ivan Petrov'}  # словарь заполняется по принципу - ключ:объект (через двоеточие)

# в него можно также добавлять новые объекты по ключу
person['age'] = 27
person['email'] = 'ivan_petrov@example.com'
person['phone'] = '8(800)555-35-35'

print(len(person), person.keys())
# Попытка извлечения объекта по несуществующему ключу приведет к ошибке!
# Можно отдельно получить список ключей:
print(person.keys())  # используя метод - .keys()
# Можно отдельно получить список значений:
print(person.values())  # используя метод - .values()
# Из словаря аналогично спискам можно удалить объект по его ключу.
# Словарь является упорядоченным.
# В функцию pop() всегда нужно передавать ключ удаляемого объекта:
person.pop('phone')
print(person)

# ***** Практический пример *****
# Использование списков и словарей по-отдельности обеспечивает удобный и эффективный способ хранения данных,
# а их совместное использование открывает еще больше возможностей.
# Рассмотрим, как может храниться база данных абитуриентов, поступающих в университет.
# Информация о каждом абитуриенте может храниться в виде словаря
# с ключами ФИО, Количество баллов, Заявление (о согласии на зачисление):

abit1 = {"ФИО" : 'Фадеев О.Е.', "Количество баллов" : 283, "Заявление" : True}
abit2 = {"ФИО" : 'Дружинин И.Я.', "Количество баллов" : 278, "Заявление" : False}
abit3 = {"ФИО" : 'Афанасьев Д.Н.', "Количество баллов" : 276, "Заявление" : True}

abits = [abit1, abit2, abit3]
print(abits)

# Этот список, по мере поступления документов, можно пополнять:
abit4 = {"ФИО" : 'Любимчиков А.Я.', "Количество баллов" : 269, "Заявление" : True}

abits.append(abit4)
print(abits)