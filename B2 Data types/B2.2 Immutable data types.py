# ***** Неизменяемые типы данных *****
# *** Типы данных ***
# Типы данных бывают встроенными (built-in), могут быть загружены из библиотек или созданы самостоятельно.
# Встроенные:
# Целые числа - int - 73, 0
# Числа с плавающей точкой 	float - 3.14, -2.79
# Строки - str - "Hello, world!"
# Логические переменные - bool - True, False
# Списки - list - [1,2,3,4]
# Кортежи - tuple - (‘a’,’b’,’c’)
# Словари - dict - {‘a’ : 1, ‘b’ : 2}
# Множества - set - {‘a’, 1, ‘b’, 2}

# Преобразование или приведение типов - представление одного типа данных в другом.
# Например, число в строку или список в виде множества.
# Таких вариантов очень много.

# Функция для определения типа переменной - type()
print("функция - type()")
a = 3.14
b = '2.17'
print(type(a))
print(type(b))
print()

# Все типы можно разделить на две группы: изменяемые и неизменяемые типы данных.
# Неизменяемые типы:
#   1. Целые числа (int)
#   2. Числа с плавающей точкой (float)
#   3. Строки (str)
#   4. Логические переменные (bool)
#   5. Кортежи (tuple)
# Изменяемые типы:
#   1. Списки (list)
#   2. Словари (dict)
#   3. Множества (set)
# Особенность неизменяемых типов - нельзя менять такие объекты "на лету".
# То есть, изменив строку мы создадим новый объект с внесенными изменениями.
# Изменяемые типы позволяют удалять, менять местами или добавлять элементы и,
# при этом объект остается прежним.

# *** Целые числа ***
print("*** Целые числа ***")
# Объекты типа int предназначены для хранения целочисленных данных.
a = 1
b = 73
c = -12
d = 2
# Проверим:
print(type(a))
print(type(b))
print(type(c))
print(type(d))
print()

# С такими объектами можно производить известные операции:
# сложение, вычитание, умножение и возведение в степень.
# В результате получаются также целые числа (кроме операции деления)
e = a + b
print(e)
print(type(e))

f = b * c
print(f)
print(type(f))

g = b ** d  # возведение в степень
print(g)
print(type(g))
print()

# *** Числа с плавающей точкой ***
print("*** Числа с плавающей точкой ***")
# Под числами с плавающей точкой подразумеваются дробные числа,
# а сам термин «плавающая точка» или «плавающая запятая» происходит
# от особенностей хранения таких чисел в памяти компьютера.
x = 0.1
y = 21.5
print(type(x))
print(type(y))
# С числами с плавающей точкой можно производить уже все знакомые операции, в том числе и деление:
z = y / x
print(z)
print(type(z))

# обмен значениями между двумя переменными через "+" и "-"
a1 = 4
print('a1= ', a1)
b1 = 7
print('b1= ', b1)
a1 = b1 - a1
b1 = b1 - a1
a1 += b1
print("a1= ", a1)
print("b1= ", b1)
print()

# можно заменить множественным присвоением
a1 = 4
print('a1= ', a1)
b1 = 7
print('b1= ', b1)
a1, b1 = b1, a1
print("a1= ", a1)
print("b1= ", b1)
print()

# *** Строки ***
print("*** Строки ***")
# Для представления текстовой информации в Python используются объекты типа str — строки.
# Запись текстовых данных осуществляется с помощью апострофов и кавычек:
some_text = "python"
other_text = 'java'
# если необходимо использовать апостроф или кавычки внутри самого текста:
introducing = "I'm Ivan"
action = 'Я читаю "Изучаем python" Марка Лутца'
# Использование одиночного апострофа внутри кавычек также как и кавычек внутри апострофов
# не приведет к появлению ошибки, в отличие от неправильной записи

# Язык предоставляет нам возможность записывать большие текстовые блоки,
# используя тройные кавычки (как одинарные, так и двойные).
# Преимущество тройных кавычек также заключается в том,
# что в такой записи можно не беспокоиться об использовании апострофов или кавычек внутри строки.
long_text = '''Здесь может
               находиться
               большой "кусок" кода'''
other_long_text = """Таким образом тоже
                     можно записать"""
# Python позволяет получить доступ к отдельным символам или даже подстрокам,
# обращаясь к ним по индексам — порядковому номеру символа в строке:
s = "python"
print(s[0])
print(s[1:4])
print()

# *** Логические переменные ***
print("*** Логические переменные ***")
# Они создаются с помощью ключевых слов True и False,
# как некоторая договоренность между разработчиками для именования таких значений:
t = True
f = False
# Логические значения можно получать и как возвращаемое значение некоторых действий, таких как сравнение:
print(3 > 10)
print(3 < 10)
print(3 == 10)
# Можно также проверить, содержится ли какой-то символ в строке:
print('r' in 'world')
print('th' in 'python')
print('the' in s)
print()

# *** Кортеж ***
print("Кортеж")
# Для сохранения нескольких объектов (необязательно текстовых) в одну переменную
# можно использовать кортежи (tuple).
# Чтобы создать кортеж, нужно записать данные в круглые скобки через запятую:
date = (9, 'may', 2022)
print(date)
# После чего можно получить доступ к отдельным переменным по индексу:
print(date[0])
print(date[1])
print(date[2])
# В связи с тем, что кортеж, также как и другие приведенные выше типы,
# является неизменяемым, попытка его модифицировать приведёт к ошибке!

# Встроенная функция - id(), которая возвращает уникальный идентификатор любого объекта
s1 = "Hello"
print(id(s1), s1)
s2 = " world!"
print(id(s2), s2)
s1 = s1 + s2
print(id(s1), s1)
# Идентификатор переменной s1 после модификации изменился.
# Это означает, что старая строка "Hello" была стёрта,
# а вместо неё записана новая, независимая от неё, строка.
# По «случайному» совпадению начало новой строки совпадает со старой,
# но с точки зрения программы переменная s1 перезаписалась полностью.