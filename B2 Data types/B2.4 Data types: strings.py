# ***** Строки *****
print("***** Строки *****")
# Строки — это неизменяемый тип данных, предназначенный для хранения текстовой информации.
# Каждый символ в строке пронумерован, и начало отсчета ведется с нуля.
# Порядковый номер символа называют индексом.
# Чтобы извлечь элемент строки по индексу, нужно написать его внутри квадратных скобок
# справа от переменной, которая хранит текстовые данные:
s = "Hello!"
print(s[0])
print(s[4])

# Можно извлекать не только одиночные элементы, но и целые подстроки, также используя индексацию:
print(s[1:4])

# Выражение, находящееся внутри квадратных скобок называется срезом.
# В общем случае, срезы определяются по шаблону [начало:конец:шаг]
# Не все элементы шаблона обязательно должны использоваться.

# Например, можно извлечь все символы, начинающиеся с определенного индекса:
print(s[2:])

# Или находящиеся до какого-то индекса:
print(s[:4])
# Важно не забывать, что символ с указанным индексом сам не включается в подстроку.

# Можно извлекать символы, используя только шаг.
# Например, для извлечения каждого второго символа нужно использовать:
print(s[::2])

# Отрицательный шаг позволяет развернуть строку:
print(s[::-1])

# Отрицательным может быть не только шаг, но и сам индекс.
# Отрицательные индексы нумеруются от последнего символа к первому:
print(s[-1])
print(s[-3:-1])

# ***** Полезные функции *****
print("Полезные функции")

# Встроенная функция len() позволяет узнать длину строки:
print("Функция - len()")
print(len(s))
print()

print("Метод - .find()")
# Метод find(substr), определенный для строк, позволяет находить символы и подстроки:
print(s.find('H'))  # вернет индекс указанного элемента
print(s.find('o!'))  # в случае подстроки возвращает индекс первого символа
# Если символ или подстрока встречаются несколько раз, то возвращается индекс первого вхождения:
print(s.find('l'))  # встречается в индексах 2 и 3

# Ряд функций позволяет определить, состоит ли строка из цифр, букв или одновременно из букв и цифр:
print(s.isdigit())  # строка состоит из цифр?
print(s.isalpha())  # строка состоит из букв?
print(s.isalnum())  # строка состоит из цифр и букв?

# Приведенные ниже методы позволяют привести все буквы к верхнему регистру (заглавным буквам)
# или к нижнему регистру (строчным буквам).
# Обратите внимание, что исходная строка не изменяется:
print(s.upper())
print(s.lower())
print(s)
print()

print("Метод - .split()")
colors = "red blue green"
print(colors.split())  # Результат работы этого метода — список строк.
# Пробел — так называемый разделитель (separator) по умолчанию, но им может быть что угодно.
# Например, путь к файлу в операционной системе Linux записывается через символ /,
# и его можно разбить на все директории и, собственно, конечный файл:
path = '/home/user/documents/file.txt'
print(path.split('/'))

# Строки можно не только разбивать на части, но и соединять части в единую строку.
colors = "red blue green"
colors_split = colors.split()  # список цветов по-отдельности
colors_joined = ' and '.join(colors_split)  # объединение строк
print(colors_joined)
print()

# ***** Преобразование строк *****
print("Преобразование строк")

# Чтобы ввести в консоль числа, через функцию input(), нужно сделать явное приведение типов:
int_num = int(input("Enter integer number: "))
print(int_num)
print(type(int_num))

# Python позволяет выполнить и обратное преобразование — из числа в строку.
age = 27
my_age = "i'm " + str(age)
print(my_age)

# Если складывать строку и число, мы получим ошибку, а если умножить строку на число:
wow = "WoW"
print(wow * 5)
# получим строку, которая повторится 5 раз
print()

# ***** Форматирование строк *****
print("Форматирование строк")

# Общий принцип создания форматированных строк заключается в следующем:
# шаблон_строки % (переменные)
age1 = 34
my_age1 = "I'm %d years old" % (age1)
print(my_age1)
# Мы создали строковую переменную, в середину которой поместили число
# без необходимости разбивать строки на несколько и потом склеивать их.
# Чтобы это сделать, в шаблоне строки необходимо указывать место и тип объекта,
# который нужно поместить на это место, помещая специальный символ %d.
# Он указывает, что на этом месте должно стоять целое число (digit).
