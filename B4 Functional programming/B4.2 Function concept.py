# ***** Функции *****
# Чтобы избежать лишнего дублирования кода, можно в одном месте программы поместить наш алгоритм,
# а при необходимости повторного его использования будем просто обращаться к тому месту программы, где он расположен.
# Чтобы логически объединить этот участок, который будет часто выполняться, были созданы функции.

# Функция в программировании представляет собой обособленный участок кода, который можно вызывать несколько раз,
# обратившись к нему по имени, которым он был назван.
# При вызове происходит выполнение команд тела функции (команд, находящихся внутри функции).
#
# Функция – это блок кода, который начинается с ключевого слова def, затем следует название функции, затем скобки,
# в которых указываются аргументы функции, и двоеточие в конце.
# Со следующей строки начинается тело функции. Это именно тот участок, который будет выполняться при вызове функции.

# def name_func():
#     начало тела функции
#     ...
#     конец тела функции

print('Задание 4.2.1')
# Напишите функцию print_2_add_2, которая будет складывать 2 плюс 2 и печатать этот результат.
# Не забудьте вызвать функцию, чтобы увидеть результат.


def print_2_add_2():
    print(2+2)


print_2_add_2()
print()

print('Задание 4.2.2')
# Напишите функцию hello_world, которая будет печать приветственную строку «Hello World».


def hello_world():
    print("Hello world!")


hello_world()
print()

# ***** Аргументы функций *****
# Входные данные, которые передаются функции, называются аргументы функции.

# !!! Функция может принимать неограниченное количество аргументов.
# Функция обязана принимать то количество аргументов, которое было объявлено при создании функции.
# Если передать отличное количество аргументов, то функция выдаст ошибку.

# создадим функцию, которая будет возводить любое число в степень 2.


def pow_func(base):
    print(base ** 2)


pow_func(3)
pow_func(5)

# У функций есть обязательные и необязательные аргументы.
# При вызове функции она должна получить значения всех указанных аргументов при её объявлении.
# Либо эти аргументы будут указаны при вызове, и тогда они являются обязательными.
# Либо вы можете указать значение аргумента, присвоив ему значение по умолчанию.


def pow_func_1(base1, n=2):  # задали значение n по умолчанию
    print(base1 ** n)


pow_func_1(3)
pow_func_1(5, 3)
print()


print("Задание 4.2.3")
# Напишите функцию, которая проверяет является ли число n, делителем числа a.
# И выводит на экран соответствующее сообщение, является ли число делителем или нет.


def divisor_check(a, n):
    if a % n == 0:
        print(f"Число {n} является делителем числа {a}")
    else:
        print(f"Число {n} НЕ является делителем числа {a}")


divisor_check(9, 3)
divisor_check(9, 4)
print()


print("Задание 4.2.4")
# Напишите функцию, которая проверяет является ли число n, делителем числа a.
# И выводит на экран соответствующее сообщение, является ли число делителем или нет.


def stars(n):
    while n != 0:
        print(n * '*')
        n -= 1


stars(3)
stars(10)

# def reverse_stair(n):
#    for i in range(n, 0, -1):
#        print("*" * i)
print()

# функции в Python всегда что-то возвращают, и если вы этого не указали,
# то автоматически интерпретатор подставит за вас строку return None в конец вашей функции.


def pow_function(base, n=2):
    inside_result = base ** n
    return inside_result


print(pow_function(4, 3))
res = pow_function(4, 4)
print(res)
print()

print("Задание 4.2.5")
# Напишите функцию, которая будет возвращать количество делителей числа а.
def dividers(a):
    c = 0
    for i in range(1, a+1):
        if a % i == 0:
            c +=1
    print(c)


dividers(5)
dividers(9)
print()

print("Задание 4.2.6")
# Напишите функцию, которая проверяет, является ли данная строка палиндромом или нет,
# и возвращается результат проверки. Пример:
# heck_palindrome("test")  # False
# check_palindrome("Кит на море не романтик")  # True


def check_palindrome(text):
    text = text.lower()
    text = text.replace(" ", "")
    if text == text[::-1]:
        return True
    else:
        return False


print(check_palindrome("Кит на море не романтик"))
print(check_palindrome("test"))